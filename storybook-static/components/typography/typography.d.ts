import { CSSProperties, ComponentPropsWithoutRef, ElementType, ReactNode } from 'react';
export declare const Typography: {
    Body1: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Body2: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Caption: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Error: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    ErrorCaption: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    H1: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    H2: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    H3: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    H4: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Link1: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Link2: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Overline: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Subtitle1: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
    Subtitle2: <T extends ElementType = "p">(props: TypographyProps<T>) => import("react/jsx-runtime").JSX.Element;
};
export declare const VARIANTS: {
    readonly body1: "body1";
    readonly body2: "body2";
    readonly caption: "caption";
    readonly error: "error";
    readonly errorCaption: "caption";
    readonly h1: "h1";
    readonly h2: "h2";
    readonly h3: "h3";
    readonly h4: "h4";
    readonly link1: "link1";
    readonly link2: "link2";
    readonly overline: "overline";
    readonly subtitle1: "subtitle1";
    readonly subtitle2: "subtitle2";
};
type Variants = keyof typeof VARIANTS;
export type TypographyProps<T extends ElementType = 'p'> = {
    as?: T;
    children?: ReactNode;
    color?: CSSProperties['color'];
    variant?: Variants;
} & ComponentPropsWithoutRef<T>;
export {};
